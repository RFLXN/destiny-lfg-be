model LFG {
    id             Int                @id @default(autoincrement())
    guildId        BigInt
    description    String
    lfgActivityId  Int
    activity       LFGActivity        @relation(fields: [lfgActivityId], references: [id])
    joinedMembers  LFGJoinedMember[]
    alteredMembers LFGAlteredMember[]
    when           DateTime           @db.Timestamp()
    creatorId      BigInt
    creator        User               @relation(fields: [creatorId], references: [id])
    createdAt      DateTime           @default(now()) @db.Timestamp()
    updatedAt      DateTime           @default(now()) @updatedAt @db.Timestamp()
}

model LFGActivity {
    id          Int           @id @default(autoincrement())
    name        String
    description String
    parentId    Int?
    parent      LFGActivity?  @relation("categorized", fields: [parentId], references: [id])
    children    LFGActivity[] @relation("categorized")
    lfgs        LFG[]
}

model LFGJoinedMember {
    id        Int      @id @default(autoincrement())
    lfgId     Int
    lfg       LFG      @relation(fields: [lfgId], references: [id])
    userId    BigInt
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now()) @db.Timestamp()

    @@unique([lfgId, userId])
}

model LFGAlteredMember {
    id        Int      @id @default(autoincrement())
    lfgId     Int
    lfg       LFG      @relation(fields: [lfgId], references: [id])
    userId    BigInt
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now()) @db.Timestamp()

    @@unique([lfgId, userId])
}
